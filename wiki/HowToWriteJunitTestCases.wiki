#summary One-sentence summary of this page.
#labels Phase-Support
= How to write a test using JUnit =
JUnit framework is a open source project developed by Kent Beck; you can download the last version at http://github.com/KentBeck/junit/downloads. Today the last stable version relased is 4.8.2.

= Why use JUnit? =
When a developer need to test functioning of a class, he must write another class that, by convention, it's called with the same name of the class followed by suffix “Test”.
Suppose that we have a class named MathOp that carry out operation of addition and subtraction; suppose that we want write a unit test for this class.

public class MathOp {
    public MathOp() {
    }
 
    public int add(int a, int b) {
        return a + b;
    }
 
    public int sub(int a, int b) {
        return a – b;
    }
}

First, we must create another class that we call, by convention,  
Come accennato prima, è necessario creare un’altra classe, che deve essere chiamata MathOpTest.
To use JUnit library is necessary to add it to the build path of the project. (you can do it adding library from the preference of the Eclipse project).

= Import JUnit class =
To use the constructs of JUnit to do assertion on method's result, it's necessary to import, first of all, the library and import statically the class of package org.junit.Assert:

import org.junit.*;
import static org.junit.Assert.*;

= Test class =
Now we are ready to write the test class. To indicate to JUnit which are methods that makes tests its necessary to mark them with annotation @Test. 
In this way, Junit will recognize methods that contains assertion.

	import org.junit.*;
	import static org.junit.Assert.*;
	 
	public class MathOpTest {
	    @Test
	    public void testAdd(){
	        MathOp a = new MathOp();
	        assertEquals(4, a.add(3, 1));	    }
	 
	    @Test
	    public void testSub(){
	        MathOp a = new MathOp();
	        assertEquals(-4, a.add(-3, 1));
	    }
	}

= The assertion =
Con JUnit è possibile effettuare diversi tipo di test (con asserzioni diverse). Al momento dell’esecuzione, un test si considera superato se tutte le condizioni specificate risultano verificate.
assertEquals(expected, actual), assertArrayEquals(expected, actual) : richiede che il valore ‘expected’ sia uguale a ‘actual’
assertTrue(cond): richiede che ‘cond’ abbia come valore: ‘true’
assertFalse(cond): richiede che ‘cond’ abbia come valore ‘false’
assertNull(obj): richiede che ‘obj’ sia un riferimento nullo
assertNotNull(obj): richiede che ‘obj’ sia un riferimento non nullo
Le asserzioni @Before e @After
Nell’esempio precedente, in ognuno dei due test case è stato istanziato un oggetto MathOp. JUnit mette a disposizione degli sviluppatori una funzionalità per eseguire delle istruzioni prima che vengano eseguiti i test. Il metodo setUp() ha un’annotazione @Before che serve ad indicare a JUnit che il metodo va eseguito prima dell’esecuzione dei test case. In questo modo, il codice per inizializzare oggetti o risorse (ad esempio una connessione al DBMS) è concentrato in un solo punto della classe di test.
Analogamente a @Before, l’annotazione @After indica a JUnit di eseguire il metodo dopo l’esecuzione dei test case.

	import org.junit.*;
	import static org.junit.Assert.*;
	 
	public class MathOpTest {
	    private MathOp a;
	 
	    @Before
	    public void setUp(){
	        a = new MathOp();
	    }
	 
	    @Test
	    public void testAdd(){
	        assertEquals(4, a.add(3, 1));
	    }
	 
	    @Test
	    public void testSub(){
	        assertEquals(-4, a.sub(-3, 1));
	    }
	}

= Launch the tests =
I test possono essere lanciati direttamente da Eclipse selezionando la classe di test e cliccando su “Run as” -> “JUnit Test”. 
E’ possibile utilizzare anche la linea di comando o i task junit e junitreport diApache Ant.
Di seguito uno screenshot dei risultati del test in Eclipse:


= Details =


Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages