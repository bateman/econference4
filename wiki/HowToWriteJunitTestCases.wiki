#summary In this wiki we show how to write a test case in JUnit using correct sintax respecting all needs of econference4.
#labels Phase-Support

= How to write a test using JUnit =
JUnit framework is a open source project developed by Kent Beck; you can download the last version at http://github.com/KentBeck/junit/downloads. Today the last stable version released is 4.8.2.

= Why use JUnit? =
When a developer need to test functioning of a class, he must write another class that, by convention, it's called with the same name of the class followed by suffix “Test”.
Suppose that we have a class named MathOp that carry out operation of addition and subtraction; suppose that we want write a unit test for this class.

public class MathOp {
    public MathOp() {
    }
 
    public int add(int a, int b) {
        return a + b;
    }
 
    public int sub(int a, int b) {
        return a – b;
    }
}

First, we must create another class that we call, by convention,  
To use JUnit library is necessary to add it to the build path of the project. (you can do it adding library from the preference of the Eclipse project).

= Import JUnit class =
To use the constructs of JUnit to do assertion on method's result, it's necessary to import, first of all, the library and import statically the class of package org.junit.Assert:

import org.junit.*;
import static org.junit.Assert.*;

= Test class =
Now we are ready to write the test class. To indicate to JUnit which are methods that makes tests its necessary to mark them with annotation @Test. 
In this way, Junit will recognize methods that contains assertion.

	import org.junit.*;
	import static org.junit.Assert.*;
	 
	public class MathOpTest {
	    @Test
	    public void testAdd(){
	        MathOp a = new MathOp();
	        assertEquals(4, a.add(3, 1));	    }
	 
	    @Test
	    public void testSub(){
	        MathOp a = new MathOp();
	        assertEquals(-4, a.add(-3, 1));
	    }
	}

= The assertion =
With JUnit it’s possible to do many type of test with different assertion. At the execution moment, a test is passed if all conditions specified are true.

assertEquals(expected, actual), assertArrayEquals(expected, actual) : requires that the value ‘expected’ is equal to ‘actual’.
assertTrue(cond): required that ‘cond’ has value ‘true’
assertFalse(cond): required that ‘cond’ has value ‘false’
assertNull(obj): required that ‘obj’ is a null reference
assertNotNull(obj): required that ‘obj’ isn't null reference

= The assertion @Before e @After =
In the previous example, in all test case is instanced an object MathOp. JUnit provides developers a feature to execute instructions before they are carried out tests. setUp() method have the annotation @Before that is used to indicate to JUnit that the method is to run before the execution of other test case. In this way, the code to initialize objects and resources (for example a connection to a DBMS) is write  in one point of test case.
Similary to @Before, @After indicates to JUnit to execute the method after the execution of all test cases.

	import org.junit.*;
	import static org.junit.Assert.*;
	 
	public class MathOpTest {
	    private MathOp a;
	 
	    @Before
	    public void setUp(){
	        a = new MathOp();
	    }
	 
	    @Test
	    public void testAdd(){
	        assertEquals(4, a.add(3, 1));
	    }
	 
	    @Test
	    public void testSub(){
	        assertEquals(-4, a.sub(-3, 1));
	    }
	}

= Launch the tests =
The test can be launched from Eclipse selecting the test class and clicking on“Run as” -> “JUnit Test”.
It's possible to use the command linee o the junit task and junit report of Apache Ant.

Below there is a screenshot of the test results in Eclipse:

INSERT IMAGE

The two tests have positive end.If there are errori, this are showed in the section named Errors, while the condition not verified will be counted in the section named Failured.

= Setting time limit =
The performance verification is one of the most difficult issue in JUnit. JUnit 4 not competly solve the problem but offers an util help: infact the test method can be signed with a timeout parameter. If the test are running in a time over, it fails. For example, in the next code the test fails if it need more than 500 
Se il test viene eseguito in un tempo superiore a quello indicato, fallisce. Per esempio, nel codice seguente il test non riesce se il metodo richiede più di 500 ms to be ended:

	@Test(timeout=500) public void retrieveAllElementsInDocument() {
	    doc.query("//*");
	}
Apart from simple benchmarking, timed tests are also useful for the testing of network operations. If you are trying to connect to a slow or unreachable database, you can bypass the test so as not to slow down the following tests:

	@Test(timeout=2000)
	  public void remoteBaseRelativeResolutionWithDirectory()
	   throws IOException, ParsingException {
	      builder.build("http://www.qualcosa.org/xml");
	}

= Ignored Tests =
@Ignore annotation allows to mark the test methods that you want skip
Suppose that we have a test method that need more time to be executed: not necessary we must to speed up it, simply it's work could be more complex. For example, same test that trying to connect to remote server are in this case test category. To not slowing other methods, it's possible to annotate this test to ignore it.

	@Ignore public void testUTF32BE()
	      throws ParsingException, IOException, XIncludeException {
	 
	        File input = new File(
	          "data/xinclude/input/UTF32BE.xml"
	        );
	        Document doc = builder.build(input);
	        Document result = XIncluder.resolve(doc);
	        Document expectedResult = builder.build(
	          new File(outputDir, "UTF32BE.xml")
	        );
	        assertEquals(expectedResult, result);
	}
During the execution of all test case, this method will be ingnored.

= Sintax for test cases to use in econference4 =

In Econference4 project, to write a test case you must respect the classic sintax that we have reported in previous paragraph.
In the actual version of econference4 you can find different sintax in more test cases because the version uf JUnit used until recently is the JUnit3. But econference4 now implement JUnit4 that support old(JUnit3) and new sintax. Whereas the sintax of JUnit more simply than sintax of JUnit 3, you have to use only JUnit4 sintax

= Test's methods =
All previous versions of JUnit used coding conventions and reflection to mark a method how tests. For example, the following test verifies that 1 + 1 equals 2:

	import junit.framework.TestCase;
	 
	public class AdditionTest extends TestCase {
	 
	  private int x = 1;
	  private int y = 1;
	 
	  public void testAddition() {
	    int z = x + y;
	    assertEquals(2, z);
	  }
	}

Conversely, in JUnit4 the tests are marked by @Test annotation, as follows:

	import org.junit.Test;
	import junit.framework.TestCase;
	 
	public class AdditionTest extends TestCase {
	 
	  private int x = 1;
	  private int y = 1;
	 
	  @Test public void testAddition() {
	    int z = x + y;
	    assertEquals(2, z);
	  }
	}

In general, in this way you can use your preferred name that are properly related to your application and your programming style.
The TestCase classe is present but is no longerly necessary to extend them. Simply you have to mark the test methods using @Test annotation and you can insert them in any class. 
To use assert method is necessary to import the class junit.Assert, as follow:

	import org.junit.Assert;
	 
	public class AdditionTest {
	 
	  private int x = 1;
	  private int y = 1;
	 
	  @Test public void addition() {
	    int z = x + y;
	    Assert.assertEquals(2, z);
	  }
	}

You can also use the new static import feature of JDK 5 to make this easier than the old version of JUnit:

	import static org.junit.Assert.assertEquals;
	 
	public class AdditionTest {
	 
	  private int x = 1;
	  private int y = 1;
	 
	  @Test public void addition() {
	    int z = x + y;
	    assertEquals(2, z);
	  }
	}

This approach makes the testing of protected methods much easier, because the test class can now extend the class containing the protected methods.

=The setup and teardown methods=
The run tools of JUnit 3 tests automatically run the method setUp () before each test method. Normally, we use setUp () to initialize the data needed to run the tests, reset any environment variables, and so on. For example, here is a setup () method:


	protected void setUp() {
	 
	    System.setErr(new PrintStream(new ByteArrayOutputStream()));
	 
	    inputDir = new File("data");
	    inputDir = new File(inputDir, "xslt");
	    inputDir = new File(inputDir, "input");
	 
	}

Also in JUnit 4 it's possible to initialize the data and configure the environment before each test method: however, the method that performs these operations do not need to be named setUp (). He just needs to marked this method with the @Before annotation:
 l’annotazione @Before:

	@Before protected void initialize() {
	 
	    System.setErr(new PrintStream(new ByteArrayOutputStream()));
	 
	    inputDir = new File("data");
	    inputDir = new File(inputDir, "xslt");
	    inputDir = new File(inputDir, "input");
	}

It is also possible to have different test methods annotated with @Before: in this case, each of these will be running before test method:


	@Before protected void findTestDataDirectory() {
	    inputDir = new File("data");
	    inputDir = new File(inputDir, "xslt");
	    inputDir = new File(inputDir, "input");
	}

	@Before protected void redirectStderr() {
	    System.setErr(new PrintStream(new ByteArrayOutputStream()));
	}

Operations of the cleanup work in a similar way. In JUnit 3, we use the method tearDown() : note, in this snippet, we call the garbage collection to force the recovery of memory.


	protected void tearDown() {
	  doc = null;
	  System.gc();
	}

In JUnit4, you can mark any method with @After annotation:

	@After protected void disposeDocument() {
	  doc = null;
	  System.gc();
	}

Come con l’annotazione @Before, si possono creare diversi metodi di cleanup annotati con @After, ciascuno dei quali sarà eseguito dopo ogni test.
Inoltre, non è più necessario chiamare esplicitamente i metodi di inizializzazione e di cleanup della superclasse. Fino a quando non vengono sovrascritti, il “test runner” chiamerà questi metodi automaticamente, se necessario. I metodi @Before presenti nelle superclassi sono invocati prima prima dei metodi @Before delle sottoclassi (si noti come questo comportamento rispecchi l’ordine di chiamata dei costruttori). I metodi @After sono eseguiti in senso inverso: prima quelli delle sottoclassi e poi quelli delle superclassi.
Inizializzazione delle classi di test
JUnit 4 introduce anche una nuova funzionalità che non ha equivalenti in JUnit 3: un metodo di inizializzazione, simile a setUp(), che opera a livello di classe. Ogni metodo annotato @BeforeClass sarà eseguito una volta, subito dopo il caricamento della classe di test, e prima che i metodi di test siano eseguiti; di contro, ogni metodo annotato con @AfterClass verrà eseguito una sola volta, dopo che tutti i metodi di test sono stati eseguiti.
Per esempio, si supponga che ciascuna classe di test usi una connessione a un database, una connessione di rete, una grande struttura dati, o qualche altra risorsa che è particolarmente oneroso inizializzare o scaricare. Invece di ricreare queste risorse prima di ogni test, è possibile inizializzarle e deinizializzarle una sola volta. Questo approccio renderà l’esecuzione di alcuni casi di test assai più rapida.

	private PrintStream systemErr;
	 
	@BeforeClass protected void redirectStderr() {
	    systemErr = System.err; // Hold on to the original value
	    System.setErr(new PrintStream(new ByteArrayOutputStream()));
	}
	 
	@AfterClass protected void tearDown() {
	    // restore the original value
	    System.setErr(systemErr);
	}

Come testare le eccezioni
Il meccanismo di test delle eccezioni è uno dei principali miglioramenti apportato a JUnit 4. Nelle vecchie versioni di Junit si usava un blocco try contenente il codice che dovrebbe generare l’eccezione, e una chiamata a fail() dalla fine del blocco try. Per esempio, il codice seguente verifica che sia generata una ArithmeticException:

	public void testDivisionByZero() {
	 
	    try {
	        int n = 2 / 0;
	        fail("Divisione per zero.");
	    }
	    catch (ArithmeticException success) {
	        assertNotNull(success.getMessage());
	    }
	}

In JUnit 4, è possibile scrivere esplicitamente il codice che genera l’eccezione: un’annotazione dichiara che è previsto che sia sollevata un’eccezione:

	@Test(expected=ArithmeticException.class)
	  public void divideByZero() {
	    int n = 2 / 0;
	}

Se l’eccezione non viene sollevata o se è diversa da quella prevista, il test avrà esito negativo. Si tenga presente che potrebbe ancora essere utile il blocco try-catch vecchio stile, per esempio se si desidera verificare il messaggio d’errore, eventuali dettagli dell’eccezione o altre proprietà.
Nuove asserzioni
JUnit 4 aggiunge due nuovi metodi assert() per il confronto di array; di seguito le definizioni:

	public static void assertArrayEquals(Object[] expecteds, Object[] actuals)
	public static void assertArrayEquals(String message, Object[] expecteds,
	Object[] actuals)

Questi due metodi confrontano gli array nel modo più ovvio: due array sono uguali se sono della stessa dimensione e se ciascun elemento è uguale a quello corrispondente nell’altro array.
Scrivere un caso di test per econference4 con JUnit
Per scrivere un caso di test per econference 4 ci si può dunque attenere sia alla vecchia sintassi della versione 3 di JUnit sia alla nuova sintassi del JUnit4. Ovviamente è preferibile per i programmatori utilizzare la più snella ed intuibile sintassi della versione 4.
Di seguito sono riportati i passi da compiere ogni volta che bisogna scrivere un nuovo caso di test.
Separare i casi di test dal codice di econference4. 
Per fare ciò creare un progetto, se non è già presente, dentro cui inserire i casi di test relativi ad un progetto. Ad esempio, come si vede nell’immagine 4, in econference4 è presente un progetto chiamato it.uniba.di.cdg.jabber e di questo è stato creato il corrispettivo progetto it.uniba.di.cdg.jabber.test dentro cui inserire i casi di test. Questo progetto deve avere al suo interno i package con lo stesso nome del progetto cui fa riferimento; per esempio all’interno del package it.uniba.di.cdg.jabber sono presenti i package

	it.uniba.di.cdg.jabber
	it.uniba.di.cdg.jabber.action
	it.uniba.di.cdg.jabber.internal
	it.uniba.di.cdg.jabber.ui
	it.uniba.di.cdg.smackproviders
	it.uniba.di.cdg.xcore.aspects

Essendo che ad oggi sono stati creati dei casi di test solo per i package 
	it.uniba.di.cdg.jabber
	it.uniba.di.cdg.jabber.internal
gli stessi devono essere presenti nel progetto it.uniba.di.cdg.jabber.test.

Dall’immagine 4 si può osservare quanto appena detto.



= Details =


Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages