#summary One-sentence summary of this page.
#labels Phase-Support
= How to write a test using JUnit =
JUnit framework is a open source project developed by Kent Beck; you can download the last version at http://github.com/KentBeck/junit/downloads. Today the last stable version released is 4.8.2.

= Why use JUnit? =
When a developer need to test functioning of a class, he must write another class that, by convention, it's called with the same name of the class followed by suffix “Test”.
Suppose that we have a class named MathOp that carry out operation of addition and subtraction; suppose that we want write a unit test for this class.

public class MathOp {
    public MathOp() {
    }
 
    public int add(int a, int b) {
        return a + b;
    }
 
    public int sub(int a, int b) {
        return a – b;
    }
}

First, we must create another class that we call, by convention,  
To use JUnit library is necessary to add it to the build path of the project. (you can do it adding library from the preference of the Eclipse project).

= Import JUnit class =
To use the constructs of JUnit to do assertion on method's result, it's necessary to import, first of all, the library and import statically the class of package org.junit.Assert:

import org.junit.*;
import static org.junit.Assert.*;

= Test class =
Now we are ready to write the test class. To indicate to JUnit which are methods that makes tests its necessary to mark them with annotation @Test. 
In this way, Junit will recognize methods that contains assertion.

	import org.junit.*;
	import static org.junit.Assert.*;
	 
	public class MathOpTest {
	    @Test
	    public void testAdd(){
	        MathOp a = new MathOp();
	        assertEquals(4, a.add(3, 1));	    }
	 
	    @Test
	    public void testSub(){
	        MathOp a = new MathOp();
	        assertEquals(-4, a.add(-3, 1));
	    }
	}

= The assertion =
With JUnit it’s possible to do many type of test with different assertion. At the execution moment, a test is passed if all conditions specified are true.

assertEquals(expected, actual), assertArrayEquals(expected, actual) : requires that the value ‘expected’ is equal to ‘actual’.
assertTrue(cond): required that ‘cond’ has value ‘true’
assertFalse(cond): required that ‘cond’ has value ‘false’
assertNull(obj): required that ‘obj’ is a null reference
assertNotNull(obj): required that ‘obj’ isn't null reference

= The assertion @Before e @After =
In the previous example, in all test case is instanced an object MathOp. JUnit provides developers a feature to execute instructions before they are carried out tests. setUp() method have the annotation @Before that is used to indicate to JUnit that the method is to run before the execution of other test case. In this way, the code to initialize objects and resources (for example a connection to a DBMS) is write  in one point of test case.
Similary to @Before, @After indicates to JUnit to execute the method after the execution of all test cases.

	import org.junit.*;
	import static org.junit.Assert.*;
	 
	public class MathOpTest {
	    private MathOp a;
	 
	    @Before
	    public void setUp(){
	        a = new MathOp();
	    }
	 
	    @Test
	    public void testAdd(){
	        assertEquals(4, a.add(3, 1));
	    }
	 
	    @Test
	    public void testSub(){
	        assertEquals(-4, a.sub(-3, 1));
	    }
	}

= Launch the tests =
The test can be launched from Eclipse selecting the test class and clicking on“Run as” -> “JUnit Test”.
It's possible to use the command linee o the junit task and junit report of Apache Ant.

Below there is a screenshot of the test results in Eclipse:

INSERT IMAGE


= Details =


Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages