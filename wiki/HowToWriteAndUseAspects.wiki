#summary This page provides a how-to guide for understanding, using, and contributing new aspects in eConference, using AspectJ.
#labels Phase-Implementation,Howto

*Index*
<wiki:toc max_depth="3" />

= What is AspectJ =

AspectJ is the Java implementation of the Aspect-oriented programming paradigm. Using aspects it is possible to define cross-cutting concerns useful in developing large-scale software.

== Cross-cutting concerns ==

  Cross-cutting concerns are parts of a program which rely on or must affect many other parts of the system. They form the basis for the development of aspects. Such cross-cutting concerns do not fit cleanly into object-oriented programming or procedural programming.

Cross-cutting concerns can be directly responsible for tangling, or system interdependencies, within a program. Because procedural and functional languages' constructs consist entirely of procedure calling, there is no semantic through which two goals (the capability to be implemented and the related cross-cutting concern) can be addressed simultaneously. As a result, the code addressing the cross-cutting concern must be scattered, or duplicated, across the various related locations, resulting in a loss of modularity. 

Aspect-oriented programming aims to encapsulate cross-cutting concerns into aspects to retain modularity. This allows for the clean isolation and reuse of code addressing the cross-cutting concern.[4] By basing designs on cross-cutting concerns, software engineering benefits are affected, including modularity and simplified maintenance.[5]


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages